{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","UserInfo","user","className","href","TodoInfo","todo","classNames","TodoList","todos","map","getUser","usersFromServer","find","todosFromServer","maxId","Math","max","App","useState","formValues","setFormValues","newTodos","setNewTodos","isTitle","setIsTitle","isUser","setIsUser","onSubmit","event","preventDefault","newMaxId","trim","Number","type","placeholder","value","onChange","filteredValue","target","replace","prevValues","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.45ff4db2.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n    {user.name}\n  </a>\n);\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => (\n  <article\n    data-id={todo.id}\n    className={classNames('TodoInfo', {\n      'TodoInfo--completed': todo.completed,\n    })}\n  >\n    <h2 className=\"TodoInfo__title\">{todo.title}</h2>\n    {todo.user && <UserInfo user={todo.user} />}\n  </article>\n);\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo/TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo key={todo.id} todo={todo} />\n    ))}\n  </section>\n);\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\n\nfunction getUser(userId: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === userId);\n\n  return foundUser || null;\n}\n\nexport const todos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nconst maxId = Math.max(...todosFromServer.map(todo => todo.id));\n\nexport const App: React.FC = () => {\n  const [formValues, setFormValues] = useState({\n    title: '',\n    userId: '',\n  });\n  const [newTodos, setNewTodos] = useState(todos);\n  const [isTitle, setIsTitle] = useState(true);\n  const [isUser, setIsUser] = useState(true);\n\n  const handleTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n    const filteredValue = value.replace(/[^a-zа-яё\\d\\s]/ig, '');\n\n    setFormValues(prevValues => ({\n      ...prevValues,\n      title: filteredValue,\n    }));\n\n    setIsTitle(!!filteredValue.trim());\n  };\n\n  const handleGetUserId = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setFormValues(prevValues => ({\n      ...prevValues,\n      userId: event.target.value,\n    }));\n    setIsUser(true);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLElement>) => {\n    event.preventDefault();\n    const newMaxId = maxId + 1;\n    const { title, userId } = formValues;\n\n    setIsTitle(!!title.trim());\n    setIsUser(!!userId);\n\n    if (title.trim() && userId) {\n      setNewTodos([\n        ...newTodos,\n        {\n          id: newMaxId,\n          userId: Number(userId),\n          title,\n          completed: false,\n          user: getUser(Number(userId)),\n        },\n      ]);\n\n      setFormValues({\n        title: '',\n        userId: '',\n      });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n      <form onSubmit={handleSubmit}>\n        <div className=\"field\">\n          {'Title: '}\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={formValues.title}\n            onChange={handleTitle}\n          />\n          {!isTitle && (<span className=\"error\">Please enter a title</span>)}\n        </div>\n\n        <div className=\"field\">\n          {'User: '}\n          <select\n            data-cy=\"userSelect\"\n            value={formValues.userId}\n            onChange={handleGetUserId}\n          >\n            <option value=\"0\">Choose a user</option>\n\n            {usersFromServer.map(user => (\n              <option value={user.id} key={user.id}>{user.name}</option>\n            ))}\n          </select>\n          {!isUser && (<span className=\"error\">Please choose a user</span>)}\n        </div>\n        <button type=\"submit\" data-cy=\"submitButton\">Add</button>\n      </form>\n      <TodoList todos={newTodos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}